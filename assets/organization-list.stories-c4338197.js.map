{"version":3,"file":"organization-list.stories-c4338197.js","sources":["../../src/components/02-components/organization-list/organization-list.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Paper,\n  TextField,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport { ElementType, ReactNode } from 'react';\nimport Link from '../../01-elements/link/link';\nimport Pager from '../../01-elements/pager/pager';\n\ntype OrganizationListProps = {\n  currentFilters: {\n    orgName: string | null;\n  };\n  url: string;\n  createOrgUrl: string;\n  totalItems: number;\n  itemsPerPage: number;\n  currentPage: number;\n  FormElement?: ElementType;\n  children: ReactNode;\n};\nexport default function OrganizationList({\n  currentFilters,\n  url,\n  createOrgUrl,\n  totalItems,\n  itemsPerPage,\n  currentPage,\n  FormElement,\n  children,\n}: OrganizationListProps) {\n  const theme = useTheme();\n\n  const firstItem = itemsPerPage * (currentPage - 1) + 1;\n  const lastItem =\n    totalItems > itemsPerPage ? firstItem + itemsPerPage - 1 : totalItems;\n\n  // Styles.\n  const containerStyles = {\n    p: theme.spacing(4),\n  };\n\n  const formContainerStyles = {\n    pt: theme.spacing(2),\n    pb: theme.spacing(6),\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  };\n\n  const formItemStyles = {\n    mb: theme.spacing(2),\n    display: 'flex',\n    [theme.breakpoints.up('sm')]: {\n      display: 'inline-flex',\n      mb: 0,\n      mr: theme.spacing(2),\n    },\n  };\n\n  const createOrgStyles = {\n    backgroundColor: theme.palette.primary.light,\n    px: theme.spacing(1),\n    py: theme.spacing(0.5),\n    borderRadius: theme.spacing(0.25),\n    mt: theme.spacing(3),\n    '&, & a': {\n      color: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      mt: 0,\n      ml: theme.spacing(3),\n    },\n  };\n\n  const listStyles = {\n    display: 'grid',\n    gridTemplateColumns: '1fr',\n    gap: theme.spacing(3),\n    [theme.breakpoints.up('sm')]: {\n      gridTemplateColumns: 'repeat(2, 1fr)',\n    },\n    [theme.breakpoints.up('md')]: {\n      gridTemplateColumns: 'repeat(3, 1fr)',\n    },\n  };\n\n  const formInner = (\n    <>\n      <TextField\n        label=\"Name\"\n        id=\"name\"\n        size=\"small\"\n        name=\"orgName\"\n        sx={formItemStyles}\n        defaultValue={currentFilters.orgName}\n      />\n      <Button variant=\"contained\" type=\"submit\">\n        Apply Filters\n      </Button>\n    </>\n  );\n\n  const form = FormElement ? (\n    <FormElement>{formInner}</FormElement>\n  ) : (\n    <form>{formInner}</form>\n  );\n\n  return (\n    <Paper sx={containerStyles}>\n      <Typography variant=\"h2\" mb={2}>\n        Select the organization you belong to\n      </Typography>\n      <Box sx={formContainerStyles}>\n        {form}\n        <Box sx={createOrgStyles}>\n          <strong>Canâ€™t find your Organization?</strong>{' '}\n          <Link href={createOrgUrl}>Create an organization</Link>\n        </Box>\n      </Box>\n      {totalItems ? (\n        <Typography sx={{ mb: theme.spacing(2) }}>\n          Showing {firstItem} to {lastItem} of {totalItems} results\n        </Typography>\n      ) : null}\n      <Box sx={listStyles}>{children}</Box>\n      {totalItems > itemsPerPage && (\n        <Pager\n          baseUrl={url}\n          count={Math.ceil(totalItems / itemsPerPage)}\n          page={currentPage}\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            pt: theme.spacing(3),\n          }}\n        />\n      )}\n    </Paper>\n  );\n}\n"],"names":["OrganizationList","currentFilters","url","createOrgUrl","totalItems","itemsPerPage","currentPage","FormElement","children","theme","useTheme","firstItem","lastItem","containerStyles","formContainerStyles","formItemStyles","createOrgStyles","listStyles","formInner","jsxs","Fragment","jsx","TextField","Button","form","Paper","Typography","Box","Link","Pager"],"mappings":"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"}